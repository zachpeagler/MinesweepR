[{"name":"app.R","content":"library(shiny)\r\nlibrary(Matrix)\r\n\r\n# Function to generate a mine field\r\ngenerate_mine_field <- function(rows, cols, num_mines) {\r\n  # Create an empty matrix\r\n  field <- Matrix(0, nrow = rows, ncol = cols)\r\n  \r\n  # Randomly place mines\r\n  mine_positions <- sample(rows * cols, num_mines)\r\n  field[mine_positions] <- -1\r\n  \r\n  # Calculate adjacent mine counts\r\n  for (r in 1:rows) {\r\n    for (c in 1:cols) {\r\n      if (field[r, c] != -1) {\r\n        # Check surrounding cells\r\n        surrounding_mines <- 0\r\n        for (dr in -1:1) {\r\n          for (dc in -1:1) {\r\n            nr <- r + dr\r\n            nc <- c + dc\r\n            \r\n            # Check if adjacent cell is within bounds and is a mine\r\n            if (nr > 0 && nr <= rows && nc > 0 && nc <= cols && field[nr, nc] == -1) {\r\n              surrounding_mines <- surrounding_mines + 1\r\n            }\r\n          }\r\n        }\r\n        field[r, c] <- surrounding_mines\r\n      }\r\n    }\r\n  }\r\n  \r\n  return(field)\r\n}\r\n\r\nui <- fluidPage(\r\n  # Dynamic styling based on theme\r\n  uiOutput(\"dynamic_css\"),\r\n  \r\n  titlePanel(\"MinesweepR\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n\r\n      # Game Configuration\r\n      numericInput(\"grid_rows\", \"Grid Rows\", \r\n                   value = 10, min = 5, max = 20),\r\n      numericInput(\"grid_cols\", \"Grid Columns\", \r\n                   value = 10, min = 5, max = 20),\r\n      numericInput(\"num_mines\", \"Number of Mines\", \r\n                   value = 15, min = 1, max = 100),\r\n      # New Game Button\r\n      actionButton(\"new_game\", \"New Game\"),\r\n      \r\n      # Theme Toggle\r\n      radioButtons(\"theme_select\", \"Theme\",\r\n                   choices = c(\"Light\" = \"light\", \"Dark\" = \"dark\"),\r\n                   selected = \"light\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      # Mode Toggle\r\n      fluidRow(\r\n      radioButtons(\"game_mode\", \"Mode\", \r\n                   choices = c(\"Reveal\" = \"reveal\", \"Flag\" = \"flag\"),\r\n                   selected = \"reveal\"),\r\n      # Flag Counter\r\n      uiOutput(\"flag_counter\")\r\n      ),\r\n      \r\n      # Game grid\r\n      uiOutput(\"game_grid\"),\r\n      \r\n      verbatimTextOutput(\"debug_field\"),\r\n      verbatimTextOutput(\"debug_revealed\"),\r\n      verbatimTextOutput(\"debug_flagged\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  # Reactive values to manage game state\r\n  game_state <- reactiveValues(\r\n    field = NULL,\r\n    revealed = NULL,\r\n    flagged = NULL,\r\n    game_over = FALSE,\r\n    game_won = FALSE,\r\n    rows = 10,\r\n    cols = 10,\r\n    num_mines = 15\r\n  )\r\n  \r\n  # Dynamic CSS based on theme\r\n  output$dynamic_css <- renderUI({\r\n    theme_colors <- if (input$theme_select == \"dark\") {\r\n      list(\r\n        bg_main = \"#1a1a2e\",\r\n        bg_cell = \"#16213e\",\r\n        bg_revealed = \"#0f3460\",\r\n        text_color = \"#e9e9e9\",\r\n        border_color = \"#414868\",\r\n        sidebar_bg = \"#16213e\",\r\n        sidebar_text = \"#000000\"\r\n      )\r\n    } else {\r\n      list(\r\n        bg_main = \"#f0f0f0\",\r\n        bg_cell = \"#cccccc\",\r\n        bg_revealed = \"#e0e0e0\",\r\n        text_color = \"#000000\",\r\n        border_color = \"#999999\",\r\n        sidebar_bg = \"#f0f0f0\",\r\n        sidebar_text = \"#000000\"\r\n      )\r\n    }\r\n    \r\n    tags$style(HTML(sprintf(\"\r\n      body {\r\n        background-color: %s;\r\n        color: %s;\r\n      }\r\n      .sidebar {\r\n        background-color: %s;\r\n      }\r\n      .sidebar .radio, .sidebar .control-label, \r\n      .sidebar label.radio-inline {\r\n        color: %s !important;\r\n      }\r\n      .game-grid {\r\n        display: grid;\r\n        grid-template-columns: repeat(%d, 50px);\r\n        gap: 2px;\r\n      }\r\n      .cell {\r\n        width: 50px;\r\n        height: 50px;\r\n        background-color: %s;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        font-weight: bold;\r\n        border: 1px solid %s;\r\n      }\r\n      .cell-clickable {\r\n        cursor: pointer;\r\n      }\r\n      .cell-revealed {\r\n        background-color: %s;\r\n      }\r\n      .cell-mine {\r\n        background-color: red;\r\n      }\r\n      .flag {\r\n        color: red;\r\n      }\r\n      .flag-counter {\r\n        font-size: 18px;\r\n        margin-bottom: 10px;\r\n        color: %s;\r\n      }\r\n    \", \r\n    theme_colors$bg_main, \r\n    theme_colors$text_color, \r\n    theme_colors$sidebar_bg,\r\n    theme_colors$sidebar_text,\r\n    game_state$cols,\r\n    theme_colors$bg_cell, \r\n    theme_colors$border_color, \r\n    theme_colors$bg_revealed,\r\n    theme_colors$text_color)))\r\n  })\r\n  \r\n  # Initialize new game\r\n  initialize_game <- function() {\r\n    rows <- input$grid_rows\r\n    cols <- input$grid_cols\r\n    num_mines <- input$num_mines\r\n    \r\n    # Store current game configuration\r\n    game_state$rows <- rows\r\n    game_state$cols <- cols\r\n    game_state$num_mines <- num_mines\r\n    game_state$field <- generate_mine_field(rows, cols, num_mines)\r\n    game_state$revealed <- Matrix(FALSE, nrow = rows, ncol = cols)\r\n    game_state$flagged <- Matrix(FALSE, nrow = rows, ncol = cols)\r\n    game_state$game_over <- FALSE\r\n    game_state$game_won <- FALSE\r\n  }\r\n  \r\n  # Initial game setup\r\n  observe({\r\n    # Only initialize if no game state exists\r\n    if (is.null(game_state$field)) {\r\n      initialize_game()\r\n    }\r\n  })\r\n  \r\n  # New game button\r\n  observeEvent(input$new_game, {\r\n    initialize_game()\r\n  })\r\n  \r\n  # Render flag counter\r\n  output$flag_counter <- renderUI({\r\n    req(game_state$flagged)\r\n    \r\n    # Count current flags\r\n    flag_count <- sum(game_state$flagged)\r\n    total_mines <- game_state$num_mines\r\n    \r\n    div(\r\n      class = \"flag-counter\",\r\n      sprintf(\"Flags: %d / %d\", flag_count, total_mines)\r\n    )\r\n  })\r\n  \r\n  # Reveal cell recursively\r\n  reveal_cell <- function(r, c) {\r\n    # Check bounds and if already revealed\r\n    if (r < 1 || r > nrow(game_state$field) || \r\n        c < 1 || c > ncol(game_state$field) || \r\n        game_state$revealed[r, c]) {\r\n      return()\r\n    }\r\n    \r\n    # Mark cell as revealed\r\n    game_state$revealed[r, c] <- TRUE\r\n    \r\n    # If mine, end game\r\n    if (game_state$field[r, c] == -1) {\r\n      game_state$game_over <- TRUE\r\n      return()\r\n    }\r\n    \r\n    # If empty cell, reveal surrounding cells\r\n    if (game_state$field[r, c] == 0) {\r\n      for (dr in -1:1) {\r\n        for (dc in -1:1) {\r\n          reveal_cell(r + dr, c + dc)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  # Cell click handler\r\n  cell_click <- function(r, c) {\r\n    # Ignore if game is over\r\n    if (game_state$game_over || game_state$game_won) return()\r\n    \r\n    # Check game mode\r\n    if (input$game_mode == \"flag\") {\r\n      # If not revealed, toggle flag\r\n      if (!game_state$revealed[r, c]) {\r\n        # if not flagged, add flag\r\n        if (!game_state$flagged[r, c]) {\r\n        game_state$flagged[r, c] <- TRUE\r\n        } else {\r\n          game_state$flagged[r, c] <- FALSE\r\n        }\r\n      }\r\n    } else {\r\n      # Reveal cell if not flagged\r\n      if (!game_state$flagged[r, c]) {\r\n        reveal_cell(r, c)\r\n        \r\n        # Check win condition\r\n        unrevealed_safe_cells <- sum(\r\n          !game_state$revealed & game_state$field != -1\r\n        )\r\n        if (unrevealed_safe_cells == 0) {\r\n          game_state$game_won <- TRUE\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  # Dynamic cell click handlers\r\n  observe({\r\n    req(game_state$field)\r\n    for (r in 1:nrow(game_state$field)) {\r\n      for (c in 1:ncol(game_state$field)) {\r\n        local({\r\n          local_r <- r\r\n          local_c <- c\r\n          observeEvent(input[[paste0(\"cell_\", local_r, \"_\", local_c)]], {\r\n            cell_click(local_r, local_c)\r\n          })\r\n        })\r\n      }\r\n    }\r\n  })\r\n  \r\n  # Render game grid\r\n  output$game_grid <- renderUI({\r\n    req(game_state$field)\r\n    \r\n    cells <- lapply(1:nrow(game_state$field), function(r) {\r\n      lapply(1:ncol(game_state$field), function(c) {\r\n        cell_value <- game_state$field[r, c]\r\n        is_revealed <- game_state$revealed[r, c]\r\n        is_flagged <- game_state$flagged[r, c]\r\n        \r\n        cell_class <- \"cell\"\r\n        cell_content <- \"\"\r\n        \r\n        if (game_state$game_over && cell_value == -1) {\r\n          cell_class <- paste(cell_class, \"cell-mine\")\r\n          cell_content <- \"ðŸ’£\"\r\n        } else if (is_revealed) {\r\n          cell_class <- paste(cell_class, \"cell-revealed\")\r\n          if (cell_value > 0) {\r\n            cell_content <- as.character(cell_value)\r\n          }\r\n        } else if (is_flagged) {\r\n          cell_content <- \"ðŸš©\"\r\n          cell_class <- paste(cell_class, \"flag\")\r\n        }\r\n        \r\n        # Add clickable class if not revealed and not game over\r\n        if (!game_state$game_over && !game_state$game_won) {\r\n          cell_class <- paste(cell_class, \"cell-clickable\")\r\n        }\r\n        \r\n        actionLink(\r\n          inputId = paste0(\"cell_\", r, \"_\", c),\r\n          label = cell_content,\r\n          class = cell_class\r\n        )\r\n      })\r\n    })\r\n    \r\n    # Flatten the list and wrap in a div\r\n    cells_flat <- unlist(cells, recursive = FALSE)\r\n    \r\n    # Game status message\r\n    status_message <- if (game_state$game_over) {\r\n      \"Game Over! You didn't sweep good enough :(\"\r\n    } else if (game_state$game_won) {\r\n      \"Congratulations! You swept the mines!\"\r\n    } else {\r\n      \"\"\r\n    }\r\n    \r\n    div(\r\n      div(class = \"game-grid\", cells_flat),\r\n      div(style = \"margin-top: 10px; color: red;\", status_message)\r\n    )\r\n  })\r\n  \r\n  ## render debug text\r\n  output$debug_field <- renderPrint({\r\n    game_state$field\r\n  })\r\n  output$debug_revealed <- renderPrint({\r\n    game_state$revealed\r\n  })\r\n  output$debug_flagged <- renderPrint({\r\n    game_state$flagged\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)","type":"text"}]
